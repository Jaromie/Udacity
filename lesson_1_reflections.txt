How did viewing a diff between two versions of a file help you see the bug that was introduced?
Viewing a diff helps to focus only on the areas which changed. This help to get straight to the
point when searching for a bug in a new version.

How could having easy access to the entire history of a file make you a more efficient programmer
 in the long term?
If i update a file containing code, having access to its previous versions is very useful if my
update contains a bug, and I have to come back to the previous version of my file. I can then 
easily compare both files and find the bug.

What do you think are the pros and cons of manually choosing when to create a commit, like you do 
in Git, vs having versions automatically saved, like Google Docs does?
When manually choosing when to create a commit, I might forget to save my changes, but I can make
sure that all the changes I saved are organised in a meaningful serie of changes.

Why do you think some version control systems, like Git, allow saving multiple files in one commit,
 while others, like Google Docs, treat each file separately?
Google docs is designed for written documents, not code, where it is less critical to track updates
made to different files at once.

How can you use the commands git log and git diff to view the history of files?
I can use the command git log with --stat argument to see how many files changed, and I can use 
git diff and the commit id of two commit so compare the actual code changes.

How might using version control make you more confident to make changes that could break something?
With version control, I have some sort of filet preventing me to hurt my code too bad while 
trying to improve it!

Now that you have your workspace set up, what do you want to try using Git for?
I want to try git with the sql query I will be writing tomorrow at work!